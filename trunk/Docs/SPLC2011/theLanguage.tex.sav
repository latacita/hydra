%============================================================================%
% Author: Pablo Sánchez                                                      %
%         p.sanchez@unican.es, http://personales.unican.es/sanchezbp         %
% Section : The language                                   Date: 28/02/2011  %
% Version : 1.0                                                              %
% Conference: SPLC 2011                                                      %
%============================================================================%

% \subsection{Expressing external constraints with clonable features}
% \input{expressing}

This section presents the language we propose for expressing constraints on feature models including clonable features. Figure~\ref{fig:languageSyntax} shows the syntax, in EBNF notation, for such a language.

\begin{figure*}
	\begin{center}
	\begin{footnotesize}
	\begin{verbatim}
00 <Constraint> ::= "true" | "false" | <SimpleFeature> | <Constraint> <BinaryOp> <Constraint> |
01                  <UnaryOp> <Constraint> | "(" <Constraint> ")" | <ContextExp> | <ComparisonExp>;
02 <BinaryOp>   ::= "and" | "or" | "xor" | "implies";
03 <UnaryOp>    ::= "not";
04 <ContextExp> ::= <SimpleFtr> "[" <Constraint> "]" | "all" <MultiValueFtr> "[" <Constraint> "]" |
05                  "any" <MultiValueFtr> "[" <Constraint> "]";
06 <ComparisonExp> ::= <NumericalExp> <ComparisonOp> <NumericalExp>;
07 <ComparisonOp>  ::= "<" | "<=" | "=" | "=>" | ">" | "!=";
08 <NumericalExp>  ::= <MultiValueFtr> | "SimpleArithmeticExp" | <MultiValueFtr> "[" <Constraint> "]";
	\end{verbatim}
	\end{footnotesize}
	\end{center}
	\caption{Syntax of the Hydra Constraint Language}
	\label{fig:languageSyntax}
\end{figure*}

A \emph{constraint} is a logical expression that evaluates to true or false. A constraint can be simply a literal, i.e \imp{true} or \imp{false} (Figure~\ref{fig:languageSyntax} line 00), which evaluates to true and false, respectively. A constraint can also be a simple feature, i.e. a feature that can appear only once as a maximum in a given context. A \imp{SimpleFeature} evaluates to true if it is selected, otherwise, it evaluates to false.

Clonable features and multiple features are represented in the syntax as \imp{MultiValueFtr}. 
A \imp{MultiValueFtr} evaluates to a positive integer (zero included). This positive integer represents the number of clones of that feature that exist in a given context of a  configuration model. Then, we can use comparison operators, more specifically $<, <=, =, >=, >$ to compare on the number of existing clones. This comparison operators evaluates to true or false. Thus, we can embed this comparison expression into more complex logical expressions. This solves the first challenge we identified in previous section, which was how to evaluate clonable and multiple features.

We can also specify the context that will be use to evaluate a given constraint. This can be made in several different ways. A context is specified by surrounding a constraint with brackets and given the name of a feature at the beginning of the expression (Figure~\ref{fig:languageSyntax}, lines 05-07 and line 11). There are several alternatives to evaluate a context expression. If the feature that serves as context is a simple feature, the constraint placed into brackets is evaluated using the subtree of the configuration model with root in the simple feature as context. The result of the \imp{ContextExpression} is the result of evaluating the \imp{Constraint}.

Otherwise, the feature that specifies a context is a multivalue feature. In this case, the constraint is evaluated using as context  the subtree with root in each existing clone of the multivalue feature.  A context expression with a mutilvalue feature as contexts evaluates to the number of subtrees for which the constraint evaluates to true. For instance, in the context expression \imp{Room[LightMng]}, using the configuration model depicted in Figure~\ref{fig:smartHomeCfg}, \imp{LightMng} would evaluated using the subtrees with root in \imp{Bedroom} and \imp{Kitchen} and it will evaluate to 1, since \imp{LightMng} is selected only in one room. Our feature modelling tool, called \emph{Hydra} checks that each name refers exclusively to only one feature. If different features share the same name in the feature model, they need to be disambiguated using contexts.  This solves the third challenge described in the previous section, which was how to deal with contexts.

We would like to highlight that a feature can be simple in a given context and multiple in another context. For instance, \imp{LightMng} (see Figure~\ref{fig:smartHomeFM}) is simple in the context of \imp{GeneralFacilities} and multiple in the context of \imp{SmartHome}, i.e. the whole feature model, as it was already mentioned in the previous section. This means that \imp{LightMng}, according to our syntax, is a valid constraint in the \imp{Room} context, but and invalid expression in the \imp{SmartHome} context. Thus, \imp{LightMng} or \imp{Floor[LightMng]} would be not valid sentences of our language, whereas \imp{Room[LightMng]} would be. Hydra takes care of this by means  checking of what kind each feature is in a given context. Basically, a feature is a multivalue feature if: (1) it is a clonable feature; or (2) in a given context, one of their ancestors is a clonable feature. Then, Hydra checks we are not using multivalue features as terminal symbols and that each multivalue feature is embedded in a \imp{ComparisonExpression} which returns a boolean value at the end. This solves the four research challenge identified in the previous section, which was how to properly deal with multiple features.

Finally, in context expression with multivalue features, we can also use quantification operators \imp{all} and \imp{any} to specify the number of clones of that feature for which the specified constraint must be true. Context expression using quantifiers evaluates to true or false. An expression quantified by \imp{any} evaluates to true, if the constraint evaluates to true for at least the context provided by one clone of the multivalue feature. Otherwise, it evaluates to false. An expression quantified by \imp{all} evaluates to true, if the constraint evaluates to true in each contexts provided by all the clones of the multivalue feature. Otherwise, it evaluates to false. For instance, \imp{any Room[LightMng]} would evaluate to true using the configuration model of Figure~\ref{fig:smartHomeCfg}, whereas \imp{all Room[LightMng]} would evaluate to false. This solves the second research challenge identified in the previous section, which was how to deal with quantification mechanisms.

We have validated this language by applying it to the SmartHome case study. Table~\ref{fig:constraints} shows the different external constraints we have added to the feature model of Figure~\ref{fig:smartHomeFM} to avoid creating invalid configurations.

\begin{figure}[!tb]
	\begin{verbatim}
00 Facilities[SmartEnergy implies (HeaterMng and WindowMng)])
01 Facilities[LightMng] implies (all Floor[FloorFacilities[LightMng]])
02 Facilities[WindowMng] implies (all Floor[FloorFacilities[WindowMng]])
03 Facilities[HeaterMng] implies (all Floor[FloorFacilities[HeaterMng]])
04 Facilities[SmartEnergy] implies (all Floor[FloorFacilities[SmartEnergy]])
05 all Floor[FloorFacilities[SmartEnergy implies (HeaterMng and WindowMng)])
06 all Floor[FloorFacilities[LightMng] implies (all Room[LightMng])]
07 all Floor[FloorFacilities[WindowMng] implies (all Room[WindowMng])]
08 all Floor[FloorFacilities[HeaterMng] implies (all Room[HeaterMng])]
09 all Floor[FloorFacilities[SmartEnergy] implies (all Room[SmartEnergy])]
10 all Room[SmartEnergy implies (HeaterMng and WindowMng)]
11 all Room[LightMng implies (Light > 0)]
12 all Room[WindowMng implies (Window > 0)]
13 all Room[HeaterMng implies (Heater > 0)]
14 all Room[LightMng or HeaterMng or WindowMng]
	\end{verbatim}
	\caption{Constrains involving clonable features}
	\label{fig:constraints}
\end{figure}



Next section describe how we can translate these expression into a Constraint Satisfaction Problem that we can solve with the help of third-party libraries.

%============================================================================
% NOTE(Pablo): I m not happy with this text here. It must be moved
%============================================================================

% For instance, we can write a constraint such as illustrated below.
%
% \begin{equation}
% Room >= 3
% \end{equation}
%
% This constraint would specify a business rule that states that automated houses, in order to % be cost-effective, must have at least three rooms. We add to the language the logical
% operators $and, or, not$ and $implies$, with the usual semantics. Using this simple language, % we can express constraints on clonable features such as (1).






