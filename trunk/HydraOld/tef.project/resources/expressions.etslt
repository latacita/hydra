syntax(Model) "resources/expressions.ecore" {
	Model: element(Model) -> ConstraintList;
	ConstraintList -> (Constraint)*;
	
	Constraint -> Expression:composite(constraints) ws(empty) ";" ws(statement); 
	
	Expression -> Implies;
	Expression -> Term;
	
	Term -> And;
	Term -> Or;
	Term -> Factor;
	
	Factor -> AbstractFeature;
	Factor -> ComparisonOperation;
	Factor -> "(" ws(empty) Expression ws(empty) ")";
	Factor -> Neg;
	
	Implies:element(Implies) -> Expression:composite(op1) ws(space) "implies" ws(space) Term:composite(op2);
	And:element(And)     -> Term:composite(op1) ws(space) "and" ws(space) Factor:composite(op2);
	Or:element(Or)     -> Term:composite(op1) ws(space) "or" ws(space) Factor:composite(op2);
	Neg:element(Neg) -> "not" ws(space) Expression:composite(op);
	
	AbstractFeature -> Feature;
	AbstractFeature -> AllFeature;
	AbstractFeature -> AnyFeature;
	AbstractFeature -> NumberFeature;
	
	AllFeature:element(All) -> "all" ws(space) Feature:composite(op);
	AnyFeature:element(Any) -> "any" ws(space) Feature:composite(op);
	NumberFeature:element(Number) ->  INTEGER:composite(value) ws(space) Feature:composite(op);
	
	ComparisonOperation -> LEOp;
	ComparisonOperation -> LOp;
	ComparisonOperation -> GOp;
	ComparisonOperation -> GEOp;
	ComparisonOperation -> EOp;
	ComparisonOperation -> DOp;
	
	LEOp:element(LE) -> ComparisonOperand:composite(op1) ws(space) "<=" ws(space) ComparisonOperand:composite(op2);
	LOp:element(L)   -> ComparisonOperand:composite(op1) ws(space) "<" ws(space) ComparisonOperand:composite(op2);
	GOp:element(G)   -> ComparisonOperand:composite(op1) ws(space) ">" ws(space) ComparisonOperand:composite(op2);
	GEOp:element(GE) -> ComparisonOperand:composite(op1) ws(space) ">=" ws(space) ComparisonOperand:composite(op2);
	EOp:element(E)   -> ComparisonOperand:composite(op1) ws(space) "==" ws(space) ComparisonOperand:composite(op2);
	DOp:element(D)   -> ComparisonOperand:composite(op1) ws(space) "!=" ws(space) ComparisonOperand:composite(op2);
	
	ComparisonOperand:element(Quantity) -> INTEGER:composite(value);
	ComparisonOperand:element(Count)    -> "count" ws(space) "(" ws(space) Feature:composite(op) ws(space) ")";
	
	Feature:element(Feature) -> IDENTIFIER:composite(name);
}